#Construyo la imagen de mi proyecto para quedar disponible en docker.
# Este ejemplo no contempla la imagen de la base de datos.

# Es una version liviana de linux con un node instalado.
FROM node:18-alpine3.15

# Set working directory
# Establecemos el workdir para no tener que poner el path en todos los comandos que vamos a instalar.
# Crea una carpeta en nuestro sistema operativo linux
RUN mkdir -p /var/www/pokedex
# Luego indicamos que nuestro work directory estara en esa carpeta que creamos
WORKDIR /var/www/pokedex

# Copiar el directorio y su contenido
# Copiamos todo el contenido desde la raiz de mi proyecto (donde esta el dockerfile) a mi workdir
# Hay que tener cuidado con los archivos que no queremos copiar a nuestra imagen, como lo son los :
# dir/
# mongo/
# node_modules/
# git/
# Para excluirlos existe el archivo .dockerignore
COPY . ./var/www/pokedex
# Luego tambien copia los archivos de configuracion .json en el mismo directorio workdir (en teoria no seria necesario)
COPY package.json tsconfig.json tsconfig.build.json /var/www/pokedex/
# Ejecutamos e instalamos todas las dependencias que unicamente son de produccion
# el flag de --prod de momento no es necesario ya que es la unica version que tenemos
# RUN yarn install --prod
RUN yarn install
# Ejecutamos el build
RUN yarn build


# Dar permiso para ejecutar la applicación
# Como buena practica, se crea un nuevo usuario para no usar el user root que viene por defecto con docker
# Este usuario se define sin clave de acceso y se llama pokeuser
RUN adduser --disabled-password pokeuser
# Se define el permiso de este usuario solo a la carpeta de workdir
RUN chown -R pokeuser:pokeuser /var/www/pokedex
# Usamos el usuario
USER pokeuser

# Limpiar el caché que es manejado desde node
# Elimina paquetes que ya no necesitamos o residuos que ya no serian utiles
RUN yarn cache clean --force

# Exponemos en el puerto 3000
EXPOSE 3000

# Cuando termina todo el proceso, ejecutamos yarn start para dejar el servidor andando
CMD [ "yarn","start" ]